---
import {CollectionEntry, getCollection} from 'astro:content';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import Layout from '../../layouts/Layout.astro';

interface Props {
	entry: CollectionEntry<'work'>;
}

export async function getStaticPaths() {
    const work = await getCollection('work');
    return work.map((entry) => ({
    params: { slug: `Porfolio-web/project/${entry.slug}` },
    props: { entry },
    }));
}
console.log("Slug segments:", Astro.params.slug);

const { entry } = Astro.props;
if (!entry) return Astro.redirect("/Porfolio-web/404");
const { Content } = await entry.render();
---

<Layout
    title={entry.data.title}
    description={entry.data.description}
>
    <section class="stack gap-20">
        <div class="stack gap-15">
            <header class="header-slug">
                <article class="wrapper stack gap-2">
                    <a class="back-link" href="/Porfolio-web/">
                        <Icon icon='arrow-left' />
                        Proyectos
                    </a>
                    <Hero 
                        title={entry.data.title} 
                        align='start'
                    >
                        <section class="details">
                            <div class="tags">
                                {entry.data.tags.map((t:string) => <Pill>{t}</Pill>)}
                            </div>
                            <p class="description">
                                {entry.data.description}
                            </p>
                        </section>
                    </Hero>
                </article>
            </header>
            <section class="wrapper">
                <article class="stack gap-10 content">
                    {
                        entry.data.img && 
                            <img 
                                src={entry.data.img} 
                                alt={entry.data.img_alt || ''} 
                            />
                    }
                    <div class="content">
                        <Content />
                    </div>
                </article>
            </section>
        </div>
    </section>
</Layout>

<style>
    .header-slug {
        padding-bottom: 2.5rem;
        border-bottom: 1px solid var(--gay-800);
    }

    .back-link {
        display: none;
    }

    .details {
        display: flex;
        flex-direction: column;
        padding: .5rem;
        gap: 1.5rem;
        justify-content: space-between;
        align-items: center;
    }

    .tags {
        display: flex;
        gap: .5rem;
    }

    .description {
        font-size: var(--text-lg);
        max-width: 54ch;
    }

    .content {
        max-width: 65ch;
        margin-inline: auto;
    }

    .content > :global(* + *) {
        margin-top: 1rem;
    }

    .content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

    .content :global(blockquote) {
        font-size: var(--text-lg);
        font-family: var(--font-brand);
        font-weight: 600;
        line-height: 1.1;
        padding-inline-start: 1.5rem;
        border-inline-start: .25rem solid var(--accent-dark);
        color: var(--gray-0);
    }

    .back-link,
    .content :global(a){
        text-decoration: 1px solid underline transparent;
        text-underline-offset: .25rem;
        transition: text-decoration-color var(--theme-transition);
    }

    .back-link:hover,
    .back-link:focus,
    .content :global(a:focus),
    .content :global(a:hover) {
        text-decoration-color: currentColor;
    }

    @media (min-width: 50rem) {
        .back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
    }

</style>